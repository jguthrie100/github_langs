<h2>Bar chart of <%= params[:id] %>'s favourite programming languages on GitHub</h2>

<script src="https://cdnjs.cloudflare.com/ajax/libs/d3/3.5.6/d3.min.js" charset="utf-8"></script>
<script>

//
//// d3 code adapted from Mike Bostock's work: http://bl.ocks.org/mbostock/3885304
//

// Hardcoded languages-used stats into HTML file using erb to populate a JavaScript var
var data = [
  <% count = 0 %>
  <% @lang_hash.sort.each do |lang, bytes| %>
    <%= "," if count > 0 %>
    {
      "lang": "<%= lang %>",
      "bytes": <%= bytes %>
    }
    <% count += 1 %>
  <% end %>
];

//
// Everything that follows is essentially direct from Mike Bostock's example
//
var margin = {top: 20, right: 20, bottom: 30, left: 70},
    width = 960 - margin.left - margin.right,
    height = 500 - margin.top - margin.bottom;

var x = d3.scale.ordinal()
    .rangeRoundBands([10, width], .1);

var y = d3.scale.linear()
    .range([height, 0]);

var xAxis = d3.svg.axis()
    .scale(x)
    .orient("bottom");

var yAxis = d3.svg.axis()
    .scale(y)
    .orient("left")
    .ticks(10, ",");

var svg = d3.select("body").append("svg")
    .attr("width", width + margin.left + margin.right)
    .attr("height", height + margin.top + margin.bottom)
  .append("g")
    .attr("transform", "translate(" + margin.left + "," + margin.top + ")");

// Start building up bar chart
x.domain(data.map(function(d) { return d.lang; }));
y.domain([0, d3.max(data, function(d) { return d.bytes; })]);

svg.append("g")
    .attr("class", "x axis")
    .attr("transform", "translate(0," + height + ")")
    .call(xAxis);

svg.append("g")
    .attr("class", "y axis")
    .call(yAxis)
  .append("text")
    .attr("transform", "rotate(-90)")
    .attr("y", 8)
    .attr("dy", ".71em")
    .style("text-anchor", "end")
    .text("Bytes of code");

svg.selectAll(".bar")
    .data(data)
  .enter().append("rect")
    .attr("class", "bar")
    .attr("x", function(d) { return x(d.lang); })
    .attr("width", x.rangeBand())
    .attr("y", function(d) { return y(d.bytes); })
    .attr("height", function(d) { return height - y(d.bytes); });

function type(d) {
  d.bytes = +d.bytes;
  return d;
}

</script>
